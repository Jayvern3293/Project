@page "/appointments/details"
@using Microsoft.EntityFrameworkCore
@using Project.Domain
@inject IDbContextFactory<Project.Data.ProjectContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Appointment</h2>
    <hr />
    @if (appointment is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Date</dt>
            <dd class="col-sm-10">@appointment.Date</dd>
            <dt class="col-sm-2">UserId</dt>
            <dd class="col-sm-10">@appointment.UserId</dd>
            <dt class="col-sm-2">PetId</dt>
            <dd class="col-sm-10">@appointment.PetId</dd>
        </dl>
        <div>
            <a href="@($"/appointments/edit?appointmentid={appointment.AppointmentId}")">Edit</a> |
            <a href="@($"/appointments")">Back to List</a>
        </div>
    }
</div>

@code {
    private Appointment? appointment;

    [SupplyParameterFromQuery]
    private int AppointmentId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        appointment = await context.Appointment.FirstOrDefaultAsync(m => m.AppointmentId == AppointmentId);

        if (appointment is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
